---
import InlineSVG from '@components/atoms/InlineSVG.astro';
---

<Fragment>
  <div class="loading-target" data-loading-target hidden>
    <slot />
  </div>
  <div class="loading-screen" data-loading-screen>
    <div class="loading-screen__content" data-loading-screen-content>
      <div class="loading-screen__logo"><InlineSVG path="src/assets/svg/logo.svg" width="6rem" /></div>
      <div class="loading-screen__progress"></div>
      <div class="loading-screen__message" aria-description="ページを読み込んでいます。">Loading...</div>
    </div>
  </div>
</Fragment>

<style lang="scss">
  .loading-target {
    display: block;
    opacity: 1;
    transition: opacity .3s ease-out 0s;
    &[hidden] {
      opacity: 0;
    }
  }

  .loading-screen {
    color: var(--loading-screen-fg-color, var(--COLOR--GRAY-6));
    display: block;
    height: 100%;
    inset: 0 auto auto 0;
    place-content: center;
    position: fixed;
    width: 100vw;
    z-index: var(--Z-INDEX--HIGHEST, 10000);
    &::before, &::after {
      background-color: var(--loading-screen-bg-color, var(--global-dark-base-color));
      content: "";
      height: 50%;
      position: absolute;
      transform: var(--loading-screen-transform, scale(1, 1));
      transition: transform .3s ease-out .2s;
      z-index: 0;
    }
    &::before {
      inset: 0 0 auto 0;
      transform-origin: 0 0;
    }
    &::after {
      inset: auto 0 0 0;
      transform-origin: 0 100%;
    }
    &[hidden] {
      --loading-screen-transform: scale(1, 0);
      display: block;
      pointer-events: none;
    }
    &__content {
      display: block;
      font-family: var(--global-display-font-family);
      font-feature-settings: var(--FFS--PROPORTIONAL);
      font-size: 1.25rem;
      font-weight: var(--FONT-WEIGHT--M);
      gap: 1rem;
      height: 100%;
      line-height: 1;
      position: relative;
      text-align: center;
      transition: opacity .3s ease-out 0s;
      z-index: 1;
      &[hidden] {
        display: block;
        opacity: 0;
      }
    }
    &__logo {
      display: flex;
      margin: 0 auto 1rem;
      inset: auto 0 50% 0;
      justify-content: center;
      position: absolute;
    }
    &__progress {
      animation-name: loading-screen-progress;
      animation-duration: 20s;
      animation-fill-mode: forwards;
      animation-timing-function: ease-out;
      animation-iteration-count: infinite;
      background-color: var(--global-primary-color);
      height: var(--PX-TO-REM--2);
      inset: calc(50% - var(--PX-TO-REM--1)) 0 auto 0;
      position: absolute;
      transform: scale(0, 1);
      transform-origin: 0 0;
      width: 100%;
      [data-loading-screen-loaded] & {
        animation-name: none;
        transform: scale(1, 1);
      }
    }
    &__message {
      margin: 1rem auto 0;
      inset: 50% 0 auto 0;
      position: absolute;
    }
  }

  @keyframes loading-screen-progress {
    from {
      transform: scale(0, 1);
    }
    to {
      transform: scale(1, 1);
    }
  }
</style>

<script>
  // ロード画面の処理
  /** ロード画面 */
  const loadingScreen = document.querySelector('[data-loading-screen]');
  /** ロード画面内の表示 */
  const loadingScreenContent = document.querySelector('[data-loading-screen-content]');
  /** ロード対象要素（ロード前は非表示になる） */
  const loadingTarget = document.querySelector('[data-loading-target]');
  /** このリンク要素をクリックしたときのページ移動を遅らせる（その間に演出が挟める）。 */
  const anchors = document.querySelectorAll('a[href], [data-loading-screen-trigger]');
  /**
   * 指定した時間待機する非同期関数（ `await` をつけて呼び出す）。
   * @param {number} ms 待ち時間（ミリ秒）
   */
  const wait = async(ms:number) => {
    return new Promise(resolve => {
      setTimeout(() => resolve(''), ms);
    })
  };
  if (loadingScreen) {
    window.addEventListener('pageshow', () => {
      // ページが読み込まれたとき
      loadingScreenContent?.setAttribute('hidden', '');
      loadingScreen.setAttribute('hidden', '');
      loadingScreen.setAttribute('data-loading-screen-loaded', '');
      loadingTarget?.removeAttribute('hidden');
    });
    anchors.forEach(anchor => {
      if (anchor instanceof HTMLAnchorElement) {
        const href = anchor.href;
        const hrefUrl = new URL(href);
        /** リンク先が現在のページと同じか */
        const isSamePage = hrefUrl.origin + hrefUrl.pathname === location.origin + location.pathname;
        if (href && !(isSamePage && hrefUrl.hash)) {
          anchor.addEventListener('click', async(event) => {
            // 遅延するリンクがクリックされたとき
            event.preventDefault();
            loadingTarget?.setAttribute('hidden', '');
            loadingScreen.removeAttribute('hidden');
            // 遅延
            await wait(500);
            location.href = href;
          });
        }
      };
    });
  };
</script>
